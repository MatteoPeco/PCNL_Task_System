
classdef ArmState < ros.Message
    %ArmState MATLAB implementation of lwr_controllers/ArmState
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'lwr_controllers/ArmState' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '1ec4005eded14deb32698c63aa479d03' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'EstEeWrench' 'EstEeWrenchBase' 'JointName' 'EstExtTorques' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'est_ee_wrench' 'est_ee_wrench_base' 'joint_name' 'est_ext_torques' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            'ros.msggen.geometry_msgs.Wrench' ...
            'ros.msggen.geometry_msgs.Wrench' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        EstEeWrench
        EstEeWrenchBase
        JointName
        EstExtTorques
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'ArmState', 'Header')
            obj.Header = val;
        end
        function set.EstEeWrench(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Wrench'};
            validateattributes(val, validClasses, validAttributes, 'ArmState', 'EstEeWrench')
            obj.EstEeWrench = val;
        end
        function set.EstEeWrenchBase(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Wrench'};
            validateattributes(val, validClasses, validAttributes, 'ArmState', 'EstEeWrenchBase')
            obj.EstEeWrenchBase = val;
        end
        function set.JointName(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'ArmState', 'JointName');
            obj.JointName = cell(val);
        end
        function set.EstExtTorques(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = single.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'ArmState', 'EstExtTorques');
            obj.EstExtTorques = single(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.lwr_controllers.ArmState.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.lwr_controllers.ArmState(strObj);
        end
    end
end
