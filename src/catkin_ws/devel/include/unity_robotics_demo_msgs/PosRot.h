// Generated by gencpp from file unity_robotics_demo_msgs/PosRot.msg
// DO NOT EDIT!


#ifndef UNITY_ROBOTICS_DEMO_MSGS_MESSAGE_POSROT_H
#define UNITY_ROBOTICS_DEMO_MSGS_MESSAGE_POSROT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace unity_robotics_demo_msgs
{
template <class ContainerAllocator>
struct PosRot_
{
  typedef PosRot_<ContainerAllocator> Type;

  PosRot_()
    : pos_x(0.0)
    , pos_y(0.0)
    , pos_z(0.0)
    , rot_x(0.0)
    , rot_y(0.0)
    , rot_z(0.0)
    , rot_w(0.0)  {
    }
  PosRot_(const ContainerAllocator& _alloc)
    : pos_x(0.0)
    , pos_y(0.0)
    , pos_z(0.0)
    , rot_x(0.0)
    , rot_y(0.0)
    , rot_z(0.0)
    , rot_w(0.0)  {
  (void)_alloc;
    }



   typedef float _pos_x_type;
  _pos_x_type pos_x;

   typedef float _pos_y_type;
  _pos_y_type pos_y;

   typedef float _pos_z_type;
  _pos_z_type pos_z;

   typedef float _rot_x_type;
  _rot_x_type rot_x;

   typedef float _rot_y_type;
  _rot_y_type rot_y;

   typedef float _rot_z_type;
  _rot_z_type rot_z;

   typedef float _rot_w_type;
  _rot_w_type rot_w;





  typedef boost::shared_ptr< ::unity_robotics_demo_msgs::PosRot_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::unity_robotics_demo_msgs::PosRot_<ContainerAllocator> const> ConstPtr;

}; // struct PosRot_

typedef ::unity_robotics_demo_msgs::PosRot_<std::allocator<void> > PosRot;

typedef boost::shared_ptr< ::unity_robotics_demo_msgs::PosRot > PosRotPtr;
typedef boost::shared_ptr< ::unity_robotics_demo_msgs::PosRot const> PosRotConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::unity_robotics_demo_msgs::PosRot_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::unity_robotics_demo_msgs::PosRot_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace unity_robotics_demo_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'unity_robotics_demo_msgs': ['/home/poskuka-nearlab/catkin_ws/src/ros_packages/unity_robotics_demo_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::unity_robotics_demo_msgs::PosRot_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unity_robotics_demo_msgs::PosRot_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::unity_robotics_demo_msgs::PosRot_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::unity_robotics_demo_msgs::PosRot_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unity_robotics_demo_msgs::PosRot_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unity_robotics_demo_msgs::PosRot_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::unity_robotics_demo_msgs::PosRot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9869d8cce41ebbf62de929a1dd9fa7ce";
  }

  static const char* value(const ::unity_robotics_demo_msgs::PosRot_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9869d8cce41ebbf6ULL;
  static const uint64_t static_value2 = 0x2de929a1dd9fa7ceULL;
};

template<class ContainerAllocator>
struct DataType< ::unity_robotics_demo_msgs::PosRot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "unity_robotics_demo_msgs/PosRot";
  }

  static const char* value(const ::unity_robotics_demo_msgs::PosRot_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::unity_robotics_demo_msgs::PosRot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 pos_x\n\
float32 pos_y\n\
float32 pos_z\n\
float32 rot_x\n\
float32 rot_y\n\
float32 rot_z\n\
float32 rot_w\n\
";
  }

  static const char* value(const ::unity_robotics_demo_msgs::PosRot_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::unity_robotics_demo_msgs::PosRot_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pos_x);
      stream.next(m.pos_y);
      stream.next(m.pos_z);
      stream.next(m.rot_x);
      stream.next(m.rot_y);
      stream.next(m.rot_z);
      stream.next(m.rot_w);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PosRot_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::unity_robotics_demo_msgs::PosRot_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::unity_robotics_demo_msgs::PosRot_<ContainerAllocator>& v)
  {
    s << indent << "pos_x: ";
    Printer<float>::stream(s, indent + "  ", v.pos_x);
    s << indent << "pos_y: ";
    Printer<float>::stream(s, indent + "  ", v.pos_y);
    s << indent << "pos_z: ";
    Printer<float>::stream(s, indent + "  ", v.pos_z);
    s << indent << "rot_x: ";
    Printer<float>::stream(s, indent + "  ", v.rot_x);
    s << indent << "rot_y: ";
    Printer<float>::stream(s, indent + "  ", v.rot_y);
    s << indent << "rot_z: ";
    Printer<float>::stream(s, indent + "  ", v.rot_z);
    s << indent << "rot_w: ";
    Printer<float>::stream(s, indent + "  ", v.rot_w);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UNITY_ROBOTICS_DEMO_MSGS_MESSAGE_POSROT_H
