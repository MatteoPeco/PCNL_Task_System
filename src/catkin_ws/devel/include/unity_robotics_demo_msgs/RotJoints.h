// Generated by gencpp from file unity_robotics_demo_msgs/RotJoints.msg
// DO NOT EDIT!


#ifndef UNITY_ROBOTICS_DEMO_MSGS_MESSAGE_ROTJOINTS_H
#define UNITY_ROBOTICS_DEMO_MSGS_MESSAGE_ROTJOINTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace unity_robotics_demo_msgs
{
template <class ContainerAllocator>
struct RotJoints_
{
  typedef RotJoints_<ContainerAllocator> Type;

  RotJoints_()
    : a1_joint(0.0)
    , a2_joint(0.0)
    , a3_joint(0.0)
    , a4_joint(0.0)
    , a5_joint(0.0)
    , a6_joint(0.0)
    , e1_joint(0.0)  {
    }
  RotJoints_(const ContainerAllocator& _alloc)
    : a1_joint(0.0)
    , a2_joint(0.0)
    , a3_joint(0.0)
    , a4_joint(0.0)
    , a5_joint(0.0)
    , a6_joint(0.0)
    , e1_joint(0.0)  {
  (void)_alloc;
    }



   typedef float _a1_joint_type;
  _a1_joint_type a1_joint;

   typedef float _a2_joint_type;
  _a2_joint_type a2_joint;

   typedef float _a3_joint_type;
  _a3_joint_type a3_joint;

   typedef float _a4_joint_type;
  _a4_joint_type a4_joint;

   typedef float _a5_joint_type;
  _a5_joint_type a5_joint;

   typedef float _a6_joint_type;
  _a6_joint_type a6_joint;

   typedef float _e1_joint_type;
  _e1_joint_type e1_joint;





  typedef boost::shared_ptr< ::unity_robotics_demo_msgs::RotJoints_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::unity_robotics_demo_msgs::RotJoints_<ContainerAllocator> const> ConstPtr;

}; // struct RotJoints_

typedef ::unity_robotics_demo_msgs::RotJoints_<std::allocator<void> > RotJoints;

typedef boost::shared_ptr< ::unity_robotics_demo_msgs::RotJoints > RotJointsPtr;
typedef boost::shared_ptr< ::unity_robotics_demo_msgs::RotJoints const> RotJointsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::unity_robotics_demo_msgs::RotJoints_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::unity_robotics_demo_msgs::RotJoints_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace unity_robotics_demo_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'unity_robotics_demo_msgs': ['/home/poskuka-nearlab/catkin_ws/src/ros_packages/unity_robotics_demo_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::unity_robotics_demo_msgs::RotJoints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unity_robotics_demo_msgs::RotJoints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::unity_robotics_demo_msgs::RotJoints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::unity_robotics_demo_msgs::RotJoints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unity_robotics_demo_msgs::RotJoints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unity_robotics_demo_msgs::RotJoints_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::unity_robotics_demo_msgs::RotJoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e483f27ca9086997bb07bd67723e718f";
  }

  static const char* value(const ::unity_robotics_demo_msgs::RotJoints_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe483f27ca9086997ULL;
  static const uint64_t static_value2 = 0xbb07bd67723e718fULL;
};

template<class ContainerAllocator>
struct DataType< ::unity_robotics_demo_msgs::RotJoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "unity_robotics_demo_msgs/RotJoints";
  }

  static const char* value(const ::unity_robotics_demo_msgs::RotJoints_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::unity_robotics_demo_msgs::RotJoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 a1_joint\n\
float32 a2_joint\n\
float32 a3_joint\n\
float32 a4_joint\n\
float32 a5_joint\n\
float32 a6_joint\n\
float32 e1_joint\n\
";
  }

  static const char* value(const ::unity_robotics_demo_msgs::RotJoints_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::unity_robotics_demo_msgs::RotJoints_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.a1_joint);
      stream.next(m.a2_joint);
      stream.next(m.a3_joint);
      stream.next(m.a4_joint);
      stream.next(m.a5_joint);
      stream.next(m.a6_joint);
      stream.next(m.e1_joint);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RotJoints_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::unity_robotics_demo_msgs::RotJoints_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::unity_robotics_demo_msgs::RotJoints_<ContainerAllocator>& v)
  {
    s << indent << "a1_joint: ";
    Printer<float>::stream(s, indent + "  ", v.a1_joint);
    s << indent << "a2_joint: ";
    Printer<float>::stream(s, indent + "  ", v.a2_joint);
    s << indent << "a3_joint: ";
    Printer<float>::stream(s, indent + "  ", v.a3_joint);
    s << indent << "a4_joint: ";
    Printer<float>::stream(s, indent + "  ", v.a4_joint);
    s << indent << "a5_joint: ";
    Printer<float>::stream(s, indent + "  ", v.a5_joint);
    s << indent << "a6_joint: ";
    Printer<float>::stream(s, indent + "  ", v.a6_joint);
    s << indent << "e1_joint: ";
    Printer<float>::stream(s, indent + "  ", v.e1_joint);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UNITY_ROBOTICS_DEMO_MSGS_MESSAGE_ROTJOINTS_H
