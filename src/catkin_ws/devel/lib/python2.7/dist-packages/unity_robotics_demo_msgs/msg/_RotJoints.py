# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from unity_robotics_demo_msgs/RotJoints.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RotJoints(genpy.Message):
  _md5sum = "e483f27ca9086997bb07bd67723e718f"
  _type = "unity_robotics_demo_msgs/RotJoints"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 a1_joint
float32 a2_joint
float32 a3_joint
float32 a4_joint
float32 a5_joint
float32 a6_joint
float32 e1_joint
"""
  __slots__ = ['a1_joint','a2_joint','a3_joint','a4_joint','a5_joint','a6_joint','e1_joint']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       a1_joint,a2_joint,a3_joint,a4_joint,a5_joint,a6_joint,e1_joint

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RotJoints, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.a1_joint is None:
        self.a1_joint = 0.
      if self.a2_joint is None:
        self.a2_joint = 0.
      if self.a3_joint is None:
        self.a3_joint = 0.
      if self.a4_joint is None:
        self.a4_joint = 0.
      if self.a5_joint is None:
        self.a5_joint = 0.
      if self.a6_joint is None:
        self.a6_joint = 0.
      if self.e1_joint is None:
        self.e1_joint = 0.
    else:
      self.a1_joint = 0.
      self.a2_joint = 0.
      self.a3_joint = 0.
      self.a4_joint = 0.
      self.a5_joint = 0.
      self.a6_joint = 0.
      self.e1_joint = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7f().pack(_x.a1_joint, _x.a2_joint, _x.a3_joint, _x.a4_joint, _x.a5_joint, _x.a6_joint, _x.e1_joint))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.a1_joint, _x.a2_joint, _x.a3_joint, _x.a4_joint, _x.a5_joint, _x.a6_joint, _x.e1_joint,) = _get_struct_7f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7f().pack(_x.a1_joint, _x.a2_joint, _x.a3_joint, _x.a4_joint, _x.a5_joint, _x.a6_joint, _x.e1_joint))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.a1_joint, _x.a2_joint, _x.a3_joint, _x.a4_joint, _x.a5_joint, _x.a6_joint, _x.e1_joint,) = _get_struct_7f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7f = None
def _get_struct_7f():
    global _struct_7f
    if _struct_7f is None:
        _struct_7f = struct.Struct("<7f")
    return _struct_7f
